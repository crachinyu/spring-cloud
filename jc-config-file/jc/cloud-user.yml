server:
#  context-path: /sso
  port: 16008
management:
  security:
    enabled: false
eureka:
  instance:
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}

security:
  user:
    name: user
    password: password

custom:
  datasource:
    names: ds1,ds2
    ds1:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://mysql:3306/jc_apply?useUnicode=true&characterEncoding=UTF8
      username: jc
      password: jc
    ds2:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://mysql:3306/jc_apply?useUnicode=true&characterEncoding=UTF8
      username: jc
      password: jc

spring:
  # redis
  redis:
    host: redis
    port: 6379
    database: 1
    password:
    timeout: 120000
    pool:
      #池中可借的最大数
      max-active: 120
      #允许池中空闲的最大连接数
      max-idle: 30
      #获取连接最大等待时间（毫秒）
      max-wait: 12000
      #允许池中空闲的最小连接数
      min-idle: 0
  # DATASOURCE druid connetion pool
  datasource:
    name: cloud-provider-user
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://mysql:3306/yhjs?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&autoReconnect=true&idleConnectionTestPeriod=120&preferredTestQuery=select now()&allowMultiQueries=true
    username: jc
    password: jc
    initialSize: 5
    minIdle: 1
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    validationQuery: SELECT 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: false
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat
  cloud:
    stream:
      binders:
        defaultRabbit:
          type: rabbit
#          environment:
#            spring:
#              rabbitmq:
#                host: 127.0.0.1
#                username: username
#                password: pass
#                virtual-host: dev
      defaultBinder: defaultRabbit
      bindings:
#        input:
#          destination: mqTestDefault    # 目的，对应 MQ 是 exchange， 生成临时队列
#        output:
#          destination: mqTestDefault
#          contentType: text/plain
#          binder: defaultRabbit
        inputLogin:
          destination: mqLogin
          group: loginReceiveGroup1     # 具体分组 对应 MQ 是 队列名称 并且持久化队列
#        outputLogin:
#          destination: mqLogin
#          contentType: text/plain      # 实体 json string 在传递的类型装换 查看 http://docs.spring.io/spring-cloud-stream/docs/Chelsea.SR2/reference/htmlsingle/index.html#mime-types-and-java-types
#        inputRegister:
#          destination: mqRegister
#          group: registerHandler      # 拥有 group 默认会持久化队列
        outputRegister:
          destination: mqRegister
#          contentType: text/plain
swagger:
  enable: true
  baseUrl: /
logging:
  level: info
  file: /Users/jasonzhu/data/logs/user.log

